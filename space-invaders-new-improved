(require 2htdp/universe)
(require 2htdp/image)

;; Space Invaders


;; Constants:

(define WIDTH  300)
(define HEIGHT 550)

(define INVADER-X-SPEED 1.5)  ;speeds (not velocities) in pixels per tick
(define INVADER-Y-SPEED 1.5)
(define TANK-SPEED 2)-
(define MISSILE-SPEED 10)

(define HIT-RANGE 25)

(define INVADE-RATE 230)
 
(define BACKGROUND (empty-scene WIDTH HEIGHT "green"))

(define INVADER
  (overlay/xy (ellipse 10 15 "outline" "blue")              ;cockpit cover
              -5 6
              (ellipse 20 10 "solid"   "blue")))            ;saucer

(define TANK
  (overlay/xy (overlay (ellipse 28 8 "solid" "black")       ;tread center
                       (ellipse 30 10 "solid" "red"))       ;tread outline
              5 -14
              (above (rectangle 5 10 "solid" "black")       ;gun
                     (rectangle 20 10 "solid" "black"))))   ;main body

(define HALF-TANK-WIDTH (/ (image-width TANK) 2))
(define HALF-TANK-HEIGHT (/ (image-height TANK) 2))

(define TANK-HEIGHT/2 (/ (image-height TANK) 2))

(define MISSILE (ellipse 5 15 "solid" "red"))

(define BLANK (square 0 "solid" "white"))


(define TEXT-SIZE 50)
(define TEXT-COLOR "blue")
(define FINAL-IMAGE (overlay (text "Game Over" TEXT-SIZE TEXT-COLOR)
                             BACKGROUND))



;; Data Definitions:

(define-struct game (invaders missiles tank))
;; Game is (make-game  (listof Invader) (listof Missile) Tank)
;; interp. the current state of a space invaders game
;;         with the current invaders, missiles and tank position

;; Game constants defined below Missile data definition

#;
(define (fn-for-game g)
  (... (fn-for-loinvader (game-invaders g))
       (fn-for-lom (game-missiles g))
       (fn-for-tank (game-tank g))))



(define-struct tank (x dir))
;; Tank is (make-tank Number Integer[-1, 1])
;; interp. the tank location is x, HEIGHT - TANK-HEIGHT/2 in screen coordinates
;;         the tank moves TANK-SPEED pixels per clock tick left if dir -1, right if dir 1

(define T0 (make-tank (/ WIDTH 2) 1))   ;center going right
(define T1 (make-tank 50 1))            ;going right
(define T2 (make-tank 50 -1))           ;going left

#;
(define (fn-for-tank t)
  (... (tank-x t) (tank-dir t)))



(define-struct invader (x y dx))
;; Invader is (make-invader Number Number Number)
;; interp. the invader is at (x, y) in screen coordinates
;;         the invader along x by dx pixels per clock tick

(define I1 (make-invader 150 100 1))           ;not landed, moving right
(define I2 (make-invader 150 HEIGHT -1))       ;exactly landed, moving left
(define I3 (make-invader 150 (+ HEIGHT 10) 1)) ;> landed, moving right


; need to figure out what dx parameter does? how does it control the rate of the invaders appearing along x?
;(define I1 (make-invader 150 100 10))           ;not landed, moving right
;(define I2 (make-invader 150 HEIGHT -12))       ;exactly landed, moving left
;(define I3 (make-invader 150 (+ HEIGHT 10) 10)) ;> landed, moving right


#;
(define (fn-for-invader i)
  (... (invader-x i) (invader-y i) (invader-dx i)))

;; ListOfInvader is one of:
;; - empty
;; (cons Invader ListOfInvader)
;; interp. a list of invaders
(define LOI0 empty)
(define LOI1 (list I1))
(define LOI2 (list I1 I2))


#;
(define (fn-for-loi loi)
  (cond [(empty? loi) (...)]
        [else
         (...(first loi)
             (fn-for-loi (rest loi)))]))

(define-struct missile (x y))
;; Missile is (make-missile Number Number)
;; interp. the missile's location is x y in screen coordinates

(define M1 (make-missile 150 300))                       ;not hit U1
(define M2 (make-missile (invader-x I1) (+ (invader-y I1) 10)))  ;exactly hit U1
(define M3 (make-missile (invader-x I1) (+ (invader-y I1)  5)))  ;> hit U1

#;
(define (fn-for-missile m)
  (... (missile-x m) (missile-y m)))

;; ListOfMissile is one of:
;; - empty
;; - (cons Missile ListOfMissile)
;; interp. a list of missiles

#;
(define (fn-for-lom lom)
  (cond [(empty? lom) (...)]
        [else
         (...(fn-for-missile (first lom))
             (fn-for-lom (rest lom)))]))


(define G0 (make-game empty empty T0))
(define G1 (make-game empty empty T1))
(define G2 (make-game (list I1) (list M1) T1))
(define G3 (make-game (list I1 I3) (list M1 M2) T1))
(define G4 (make-game (cons (make-invader 150 200 50)(cons (make-invader 50 25 50) empty))
                      (cons (make-missile 200 300)(cons (make-missile 250 400) empty))
                      (make-tank 100 -1)))




;; =================
;; Functions:

;; Game  -> Game 
;; start the world with (main (make-game empty empty (make-tank (/ WIDTH 2) 1)))
;; 
(define (main g)
  (big-bang g                              ; G
    (on-tick   next-game 0.03)             ; G -> G ;0.125?
    (to-draw   render-game)                ; G -> Image
    (stop-when last-world? last-picture)   ; G -> Boolean
    (on-key    game-ke)))                  ; G KeyEvent -> G

;; G -> G
;; produce the next game state  
(check-expect (next-game G0) (make-game (cons (make-invader (random WIDTH) 0 1) empty) empty (make-tank (+ TANK-SPEED (/ WIDTH 2)) 1)))
(check-expect (next-game G3) (make-game (cons (make-invader (random WIDTH) 0 1)
                                              (cons (make-invader (+ INVADER-X-SPEED 150)(+ INVADER-Y-SPEED 100) 12)
                                                    (cons (make-invader (+ INVADER-X-SPEED 150)(+ INVADER-Y-SPEED (+ HEIGHT 10)) 10) empty)))
                                        (list (make-missile 150 (- 300 MISSILE-SPEED))
                                              (make-missile  (invader-x I1) (- (+ (invader-y I1) 10) MISSILE-SPEED)))
                                        (make-tank (+ TANK-SPEED 50) 1)))

;(define (next-game g) G0) ;stub

(define (next-game g)
  (make-game   (next-invaders (game-invaders g) (game-missiles g))
               (next-lom (game-missiles g) (game-invaders g))
               (next-tank (game-tank g))))


;; ListOfInvaders ListOfMissiles -> ListOfInvaders
;; create new invaders all along the top of BACKGROUND (Y = 0), advance current invaders to their next positions,
;; and filter out invaders that have collided with a missile (invader-x i) = (missile-x m) and (invader-y i) - (misisle-y m) is < HIT-RANGE
; CROSS PRODUCT TABLE OF TYPE COMMENTS
;                    ListOfMissiles               empty         (cons Missile ListOfMIssile)
; 
; ListOfInvaders
; 
; empty                                          empty (1)            loi
; 
; (cons Invader ListOfInvader)                    loi (2)             (equal? (first loi)(first lom))
;                                                                                (recursive function (rests))

(check-expect (next-invaders empty empty) empty)
(check-expect (next-invaders empty (list M1 M2))(filter-invaders (advance-invaders (create-invaders empty)) (list M1 M2)))
(check-expect (next-invaders (list I1 I3) empty)(filter-invaders (advance-invaders (create-invaders (list I1 I3))) empty))
(check-expect (next-invaders (list I1 I3)(list M1 M2))(filter-invaders (advance-invaders (create-invaders (list I1 I3))) (list M1 M2)))
                                              
;(define (next-invaders loi lom) empty) ;stub

(define (next-invaders loi lom)
  (filter-invaders (advance-invaders (create-invaders loi)) lom))


;; ListOfInvaders -> ListOfInvaders
;; add a new invader randomly all along the top of BACKGROUND if there is enough
;; x distance between the new invader and first invader in list 
;; what if there is sa condition for creating an invader? how to control their creation?
(check-expect (create-invaders empty) (cons (make-invader (random WIDTH) 0 1) empty))
(check-expect (create-invaders (list I1 I3))(cons (make-invader (random WIDTH) 0 1)
                                                  (cons I1
                                                        (cons I3 empty))))

;(define (create-invaders loi) empty) ;stub

(define (create-invaders loi)
  (cond [(empty? loi)  (cons (make-invader (random WIDTH) 0 1) empty)]
        [else
           (if (invade? (first loi))
               (cons (make-invader (random WIDTH) 0 1) loi)
               loi)]))


;; Invader -> Boolean
;; produce true if the x position of the first invader is at least INVADE-RATE away from the new invader x position
(check-expect (invade? (make-invader 100 250 1)) true)
(check-expect (invade? (make-invader 100 250 1)) false)

;(define (invade? i) true) ;stub

(define (invade? i)
   (> (abs(- (invader-x i)(random WIDTH))) INVADE-RATE))
     
         
;; ListOfInvaders -> ListOfInvaders
;; advance current invaders to the next position 
;; ASSUME: this function should never receive an empty list of invaders because create-invaders
;; will feed data into it???
(check-expect (advance-invaders (list I1 (make-invader 250 250 11)))(cons (make-invader (+ INVADER-X-SPEED 150) (+ INVADER-Y-SPEED 100) 1)
                                                                          (cons (make-invader (+ INVADER-X-SPEED 250)(+ INVADER-Y-SPEED 250) 1) empty))) 
;(define (move-invaders loi) empty) ;stub

(define (advance-invaders loi)
  (cond [(empty? loi) empty]
        [else
         (cons (move-invader (first loi))
               (advance-invaders (rest loi)))]))


;; Invader -> Invader
;; move a single invader to its next position, change direction if hitting the edge of BACKGROUND 
(check-expect (move-invader (make-invader 100 100 1))(make-invader (+ INVADER-X-SPEED 100)(+ INVADER-Y-SPEED 100) 1))

;(define (move-invader i)(make-invader 100 100 10)) ;stub 

(define (move-invader i)
  (cond [(>= (invader-x i)(- WIDTH (/ (image-width INVADER) 2))) (make-invader (- (invader-x i) INVADER-X-SPEED)  (+ (invader-y i) INVADER-Y-SPEED) -1)]
        [(<= (invader-x i)(+ 0 (/ (image-width INVADER) 2)))     (make-invader (+ (invader-x i) INVADER-X-SPEED)  (+ (invader-y i) INVADER-Y-SPEED) 1)]
        [(=  (invader-dx i) 1)                                   (make-invader (+ (invader-x i) INVADER-X-SPEED)  (+ (invader-y i) INVADER-Y-SPEED) 1)]
        [else
         (make-invader (- (invader-x i) INVADER-X-SPEED)(+ (invader-y i) INVADER-Y-SPEED) -1)]))


;; ListOfInvader ListOfMisssile -> ListOfInvader
;; filter out invaders from the list that have collided with a missile
; CROSS PRODUCT TABLE OF TYPE COMMENTS
;                    ListOfMissiles               empty         (cons Missile ListOfMIssile)
; 
; ListOfInvaders
; 
; empty                                          empty (1)            loi
; 
; (cons Invader ListOfInvader)                    loi (2)             (equal? (first loi)(first lom))
;                                                                                (recursive function (rests))

(check-expect (filter-invaders empty empty) empty)
(check-expect (filter-invaders empty (list M1 M2)) empty)
(check-expect (filter-invaders (list I1 I3) empty)(list I1 I3))
(check-expect (filter-invaders (list I1 I3)(list M1 M2)) (list I3))

;(define (filter-invaders loi lom) empty) ;stub

(define (filter-invaders loi lom)
  (cond [(or (empty? loi)(empty? lom)) loi]
        [else
         (if (direct-hit? (first loi)(first lom))
             (filter-invaders (rest loi) (rest lom))
             (cons (first loi) (filter-invaders (rest loi) lom)))]))


;; Invader -> Boolean
;; produce true if the invader's coordinates equal the coordinates of a missile
(check-expect (direct-hit? I1 M2) true)
(check-expect (direct-hit? I3 M2) false)

;(define (direct-hit? i m) false) ;stub

(define (direct-hit? i m)
  (and (< (abs (- (invader-x i)(missile-x m))) HIT-RANGE) (< (abs (- (invader-y i)(missile-y m))) HIT-RANGE)))


;; ListOfMissile ListOfInvader -> ListOfMissile
;; advance each missile in the list to its next position and filter out missiles that have moved past the top of BACKGROUND
;; (SAVE FOR LATER! MUST FIGURE OUT; or have collided with invader
; CROSS PRODUCT TABLE OF TYPE COMMENTS
;                 ListOfInvader           empty         (cons Invader ListOfInvader)     
; 
; ListOfMissile 
; 
; empty                                  empty (1)              lom = empty            
; 
; (cons Missile ListOfMissile)           lom   (2)               (equal? (first lom)(first loi))
;                                                                            (recursive (rests))

(check-expect (next-lom empty empty) empty)
(check-expect (next-lom empty (list I1 I2)) (filter-missiles (advance-lom empty) (list I1 I2)))
(check-expect (next-lom (list M1 M2) empty)(filter-missiles (advance-lom (list M1 M2)) empty))
(check-expect (next-lom (list M1 M2) (list I1 I2))(filter-missiles (advance-lom (list M1 M2)) (list I1 I2)))

;(define (next-lom lom loi) empty) ;stub

(define (next-lom lom loi)
     (filter-missiles (advance-lom lom) loi))


;; ListOfMissile -> ListOfMissile
;; advance each missile in the list to its next position  
(check-expect (advance-lom empty) empty)   ;is this correct??
(check-expect (advance-lom (cons M1 empty)) (cons (make-missile 150 (- 300 HIT-RANGE)) empty))
(check-expect (advance-lom (cons M1 (cons M2 empty))) (cons (make-missile 150 (- 300 HIT-RANGE))
                                                            (cons (make-missile (invader-x I1)(- (+ (invader-y I1) 10) HIT-RANGE)) empty)))
(check-expect (advance-lom (cons M1 (cons (make-missile 150 0) (cons M2 empty))))
              (cons (make-missile 150 (- 300 HIT-RANGE))
                    (cons (make-missile 150 (- 0 HIT-RANGE))
                          (cons (make-missile (invader-x I1)(- (+ (invader-y I1) 10) HIT-RANGE)) empty))))
                          
;(define (move-lom lom) empty) ;stub

(define (advance-lom lom)
  (cond [(empty? lom) empty]
        [else
         (cons (move-missile (first lom))
                   (advance-lom (rest lom)))]))


;; Missile -> Missile
;; move a single missile to its next position by advancing its y coordinate by its HIT-RANGE?? is this right? what is Missile-speed for?
(check-expect (move-missile M1) (make-missile 150 (- 300 HIT-RANGE)))

;(define (move-missile m) M1) ;stub 

(define (move-missile m)
      (make-missile (missile-x m) (- (missile-y m) HIT-RANGE)))


;; ListOfMissile -> ListOfMissile 
;; filter out missiles that have moved past the top of BACKGROUND
;; or have collided with an invader
; CROSS PRODUCT TABLE OF TYPE COMMENTS
;                 ListOfInvader           empty         (cons Invader ListOfInvader)     
; 
; ListOfMissile 
; 
; empty                                  empty (1)              lom = empty            
; 
; (cons Missile ListOfMissile)           lom   (2)               (equal? (first lom)(first loi))
;                                                                            (recursive (rests))

(check-expect (filter-missiles empty empty) empty)
(check-expect (filter-missiles empty (list I1 I3)) empty)
(check-expect (filter-missiles (list M1 M2) empty) (list M1 M2))
(check-expect (filter-missiles (list M1 (make-missile 150 -1) M2) (list I2 I3))
              (list M1 M2))
(check-expect (filter-missiles (list M1 M2)(list I1 I3))(list M1))

;(define (filter-missiles lom loi) empty) ;stub

(define (filter-missiles lom loi)
  (cond [(and (empty? lom) (empty? loi)) empty]
        [(or  (empty? lom) (empty? loi)) lom]
        [else
          (if (or (less-than-zero? (first lom)) (collision? (first lom)(first loi)))
                   (filter-missiles (rest lom) (rest loi))
                   (cons (first lom) (filter-missiles (rest lom) loi)))]))

;; Missile -> Boolean
;; produce true if the input missile y position is less than zero
(check-expect (less-than-zero? (make-missile 150 -1)) true)
(check-expect (less-than-zero? (make-missile 150 25)) false)

;(define (less-than-zero? m) true) ; stub 

(define (less-than-zero? m)
  (if (< (missile-y m) 0)
      true
      false))

;; Missile Invader -> Boolean
;; produce true if a missile has collided with an invader
(check-expect (collision? M2 I1) true)
(check-expect (collision? M1 I1) false)

;(define (collision? m i) false) ;stub

(define (collision? m i)
   (and (< (abs (- (missile-x m)(invader-x i))) HIT-RANGE) (< (abs (- (invader-y i) (missile-y m))) HIT-RANGE)))

;; Tank -> Tank
;; advance the tank to its next position, when it hits the edge of background
;; it changes direction and continues in the opposite direction
(check-expect (next-tank T0)(make-tank (+ (/ WIDTH 2) TANK-SPEED) 1))
(check-expect (next-tank T2)(make-tank (- 50 TANK-SPEED) -1))
(check-expect (next-tank (make-tank (- WIDTH HALF-TANK-WIDTH) 1)) (make-tank (- ( - WIDTH (/ (image-width TANK) 2)) TANK-SPEED) -1))
(check-expect (next-tank (make-tank (+ 0 HALF-TANK-WIDTH) -1))    (make-tank (+ (+ 0 (/ (image-width TANK) 2)) TANK-SPEED) 1))

;(define (next-tank t) (make-tank 20 1)) ;stub

(define (next-tank t)
  (cond [(>= (tank-x t)  (- WIDTH HALF-TANK-WIDTH)) (make-tank (- (- WIDTH HALF-TANK-WIDTH) TANK-SPEED)  -1)]
        [(<= (tank-x t)  (+ 0 HALF-TANK-WIDTH))     (make-tank (+ (+ 0 HALF-TANK-WIDTH) TANK-SPEED) 1)]
        [(=  (tank-dir t) 1)                                   (make-tank (+ (tank-x t) TANK-SPEED) 1)]
        [else
         (make-tank (- (tank-x t) TANK-SPEED) -1)]))

;; Game -> Image
;; render the game pieces onto the BACKGROUND  
(check-expect (render-game G0)(place-image INVADER (random WIDTH) 0
                                           (place-image TANK (/ WIDTH 2) (- HEIGHT (/ (image-height TANK) 2)) BACKGROUND)))
(check-expect (render-game G3)(place-image INVADER 150 100
                                           (place-image INVADER 150 (+ HEIGHT 10)
                                                        (place-image MISSILE 150 300
                                                                     (place-image MISSILE (invader-x I1) (+ (invader-y I1) 10)
                                                                                  (place-image TANK 50 (- HEIGHT (/ (image-height TANK) 2)) BACKGROUND))))))
;(define (render-game g) BLANK) ;stub

(define (render-game g)
  (cond [(and (empty? (game-invaders g))(empty? (game-missiles g)))
                      (place-image TANK (tank-x (game-tank g))(- HEIGHT (/ (image-height TANK) 2)) BACKGROUND)]
        [(empty? (game-invaders g))
         (place-image MISSILE (missile-x (first(game-missiles g))) (missile-y (first (game-missiles g)))
                                         (place-image TANK (tank-x (game-tank g))(- HEIGHT (/ (image-height TANK) 2))
                                                      (render-game (make-game (game-invaders g)(rest (game-missiles g))(game-tank g)))))]
        [(empty? (game-missiles g))
         (place-image INVADER (invader-x (first (game-invaders g)))(invader-y (first (game-invaders g)))
                      (place-image TANK (tank-x (game-tank g))(- HEIGHT (/ (image-height TANK) 2))
                                   (render-game (make-game (rest (game-invaders g))(game-missiles g)(game-tank g)))))]
        [else
         (place-image INVADER (invader-x (first (game-invaders g)))(invader-y (first (game-invaders g)))
                      (place-image MISSILE (missile-x (first (game-missiles g))) (missile-y (first (game-missiles g)))
                                   (place-image TANK (tank-x (game-tank g))(- HEIGHT (/ (image-height TANK) 2))
                                                (render-game (make-game (rest (game-invaders g)) (rest (game-missiles g)) (game-tank g))))))]))


;; Game KeyEvent -> Game
;; change direction of tank when left or right arrow key pressed and shoot up missiles when spacebar is pressed
(check-expect (game-ke G0 "left") (make-game empty empty (make-tank (/ WIDTH 2) -1)))
(check-expect (game-ke G4 "right")(make-game (cons (make-invader 150 200 50)(cons (make-invader 50 25 50) empty))
                                             (cons (make-missile 200 300)(cons (make-missile 250 400) empty))
                                             (make-tank 100 1)))
(check-expect (game-ke G3 "up")(make-game  (list I1 I3) (list M1 M2) T1))
(check-expect (game-ke G4 " ")(make-game (cons (make-invader 150 200 50)(cons (make-invader 50 25 50) empty))
                                         (cons (make-missile 100 (+ HEIGHT (/ (image-height TANK) 2)))(cons (make-missile 200 300)(cons (make-missile 250 400) empty)))
                                         (make-tank 100 -1)))
                                         
;(define (game-ke g ke) G0) ;stub
 
(define (game-ke g ke)
  (cond [(key=? ke " ")    (make-game (game-invaders g) (cons (make-missile (tank-x (game-tank g)) (+ HEIGHT (/ (image-height TANK) 2))) (game-missiles g)) (game-tank g))]
        [(key=? ke "left") (make-game (game-invaders g)(game-missiles g)(make-tank (tank-x (game-tank g))(- (tank-dir (game-tank g)))))]
        [(key=? ke "right")(make-game (game-invaders g)(game-missiles g)(make-tank (tank-x (game-tank g)) (- (tank-dir (game-tank g)))))]
        [else 
         g]))

;; Game -> Boolean
;; produce true if an invader has reached the bottom of the BACKGROUND without being hit
(check-expect (last-world? G0) false)
(check-expect (last-world? (make-game (list (make-invader 100 HEIGHT 1))
                                      (list (make-missile 100 100))
                                      (make-tank 100 1))) true)

;(define (last-world? g) false) ;stub

(define (last-world? g)
      (landed? (game-invaders g)))
        
;; ListOfInvader -> Boolean
;; produce true if an invader has reached the bottom of the BACKGROUND
(check-expect (landed? empty) false)
(check-expect (landed? (list I1 (make-invader 100 HEIGHT 1))) true)
(check-expect (landed? (list I1 (make-invader 100 100 1))) false)

;(define (landed? loi) false) ;stub 

(define (landed? loi)
  (cond [(empty? loi) false]
        [else
         (if (past-HEIGHT? (first loi))
         true
         (landed? (rest loi)))]))
                       
;; Invader -> Boolean
;; produce true if an invader's y position is equal to or greater than BACKGROUND HEIGHT 
(check-expect (past-HEIGHT? (make-invader 150 HEIGHT 1)) true)
(check-expect (past-HEIGHT? (make-invader 150 150 1)) false)

;(define (past-HEIGHT i) false) ;stub

(define (past-HEIGHT? i)
    (>= (invader-y i) HEIGHT))

;; Game -> Image
;; produce the final-image when at least 1 invader reaches the bottom of the BACKGROUND
(check-expect (last-picture G0) BACKGROUND)
(check-expect (last-picture (make-game (list (make-invader 100 HEIGHT 1))
                                      (list (make-missile 100 100))
                                      (make-tank 100 1)))
              FINAL-IMAGE)

;(define (last-picture g) BACKGROUND) ;stub

(define (last-picture g)
      (landing (game-invaders g)))

 
;; ListOfInvader -> Image
;; produce FINAL-IMAGE if an invader has reached the bottom of the BACKGROUND
(check-expect (landing empty) BACKGROUND)
(check-expect (landing (list I1 (make-invader 100 HEIGHT 1))) FINAL-IMAGE)

;(define (landing loi) BACKGROUND) ;stub 

(define (landing loi)
  (cond [(empty? loi) BACKGROUND]
        [else
         (if (past-HEIGHT? (first loi))
         FINAL-IMAGE
         (landing (rest loi)))]))
